package br.edu.eseg.brproject.model;

// Generated May 29, 2011 12:04:47 PM by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.validator.NotNull;

/**
 * Tarefa generated by hbm2java
 */
@Entity
@Cache(usage=CacheConcurrencyStrategy.NONE)
@Table(name = "tarefa")
public class Tarefa implements java.io.Serializable, Comparable<Tarefa> {

	private Long id;
	private String eap;
	private Projeto projeto;
	private Date inicio;
	private Date fim;
	private Boolean milestone;
	private String nome;
	private Double porcentcomp;
	private Tarefa tarefaPai;
	private Set<Tarefa> tarefaspredecessoras = new HashSet<Tarefa>(0);
	private Set<Tarefa> subtarefas = new HashSet<Tarefa>(0);
	private Set<Utilizacaorecurso> utilizacaorecursos = new HashSet<Utilizacaorecurso>(
			0);

	public Tarefa() {
	}

	public Tarefa(Long id) {
		this.id = id;
	}

	public Tarefa(Projeto projeto, Date fim, Date inicio) {
		this.projeto = projeto;
		this.fim = fim;
		this.inicio = inicio;
	}

	public Tarefa(Long id, Projeto projeto, Date fim, Date inicio,
			Boolean milestone, String nome, Double porcentcomp,
			Set<Tarefa> tarefaspredecessoras, Set<Tarefa> subtarefas,
			Set<Utilizacaorecurso> utilizacaorecursos) {
		super();
		this.id = id;
		this.projeto = projeto;
		this.fim = fim;
		this.inicio = inicio;
		this.milestone = milestone;
		this.nome = nome;
		this.porcentcomp = porcentcomp;
		this.tarefaspredecessoras = tarefaspredecessoras;
		this.subtarefas = subtarefas;
		this.utilizacaorecursos = utilizacaorecursos;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id")
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "projetoid", nullable = false)
	@NotNull
	public Projeto getProjeto() {
		return this.projeto;
	}

	public void setProjeto(Projeto projeto) {
		this.projeto = projeto;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "inicio", nullable = false, length = 19)
	@NotNull
	public Date getInicio() {
		return this.inicio;
	}

	public void setInicio(Date inicio) {
		this.inicio = inicio;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "fim", nullable = false, length = 19)
	@NotNull
	public Date getFim() {
		return this.fim;
	}

	public void setFim(Date fim) {
		this.fim = fim;
	}

	@Column(name = "milestone")
	public Boolean getMilestone() {
		return this.milestone;
	}

	public void setMilestone(Boolean milestone) {
		this.milestone = milestone;
	}

	@Column(name = "nome")
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Column(name = "porcentcomp", precision = 22, scale = 0)
	public Double getPorcentcomp() {
		return this.porcentcomp;
	}

	public void setPorcentcomp(Double porcentcomp) {
		this.porcentcomp = porcentcomp;
	}

	@Column(name = "eap")
	@NotNull
	public String getEap() {
		return eap;
	}

	public void setEap(String eap) {
		this.eap = eap;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "tarefapaiid")
	public Tarefa getTarefaPai() {
		return tarefaPai;
	}

	public void setTarefaPai(Tarefa tarefaPai) {
		this.tarefaPai = tarefaPai;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tarefa")
	public Set<Utilizacaorecurso> getUtilizacaorecursos() {
		return this.utilizacaorecursos;
	}

	public void setUtilizacaorecursos(Set<Utilizacaorecurso> utilizacaorecursos) {
		this.utilizacaorecursos = utilizacaorecursos;
	}

	@ManyToMany(fetch = FetchType.LAZY, targetEntity = br.edu.eseg.brproject.model.Tarefa.class)
	@JoinTable(name = "tarefapredecessora", joinColumns = @JoinColumn(name = "tarefaid", nullable = false), inverseJoinColumns = @JoinColumn(name = "tarefapredecessoraid", nullable = false))
	public Set<Tarefa> getTarefaspredecessoras() {
		return tarefaspredecessoras;
	}

	public void setTarefaspredecessoras(Set<Tarefa> tarefaspredecessoras) {
		this.tarefaspredecessoras = tarefaspredecessoras;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "tarefaPai")
	public Set<Tarefa> getSubtarefas() {
		return subtarefas;
	}

	public void setSubtarefas(Set<Tarefa> subtarefas) {
		this.subtarefas = subtarefas;
	}

	@Override
	public int compareTo(Tarefa o) {
		if (getSubtarefas().contains(o)) {
			return -1;
		} else if (o.getSubtarefas().contains(this)) {
			return 1;
		}
		return inicio.compareTo(o.inicio);
	}

	@Override
	public String toString() {
		SimpleDateFormat sdf = new SimpleDateFormat("d/M/yyyy HH:mm");
		String ini = inicio != null ? sdf.format(inicio) : null;
		String fi = fim != null ? sdf.format(fim) : null;
		return "\n{\n eap: " + eap + ",\n nome: " + nome + ",\n inicio: " + ini
				+ ",\n fim: " + fi + "\n}";
	}

	@Override
	public int hashCode() {
		if (id != null) {
			return id.hashCode();
		}
		return super.hashCode();
	}

	@Override
	public boolean equals(Object obj) {
		if (obj instanceof Tarefa) {
			Tarefa t = (Tarefa) obj;
			if (id != null) {
				return id.equals(t.id);
			}
		}
		return super.equals(obj);
	}
}